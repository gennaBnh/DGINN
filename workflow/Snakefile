from snakemake.utils import min_version, validate
min_version("7.15.2")

configfile: "config/config.json"
validate(config, "config/config.schema.yaml")
dir = config["data"]["o"]
rule init:
    input: 
        config = "config/config.json"
    output:
        infile = dir+config["parameters"]["step"]+"_input_"+[config["parameters"]["infile"]][0].split("/")[1]

    message: "Initializing pipeline, starting at step "+config["parameters"]["step"]+"."
    shell:
        "python3 scripts/Init.py {input.config} {output.infile}"


rule blast:
    input:
        infile = dir+"blast_input_{samples}.fasta"
    output:
        tsvfile = dir+"accessions_input_{samples}.tsv"
    params:
        config = "config/config.json"

    message: "Starting BLAST alignment on file {input.infile}, writing output in file {output.tsvfile}"
    shell:
        "python3 scripts/Blast.py {params.config} {output.tsvfile}"


rule extract:
    input:
        blastres = dir+"accessions_input_{samples}.tsv" # à remplacer par config["data"]["o"]+"{samples}.tsv" car tous les fichiers d'entrée n'auront pas '_blastres'
    output:
        accns = dir+"fasta_input_{samples}.txt" #à modifier quand samples aura changé 
    params:
        config = "config/config.json"

    message: "Starting Accessions search from file {input.blastres}, writing accessions in file {output.accns}"
    shell:
        "python3 scripts/Extract.py {params.config} {input.blastres} {output.accns}"


rule fasta_res:
    input: 
        accns = dir+"fasta_input_{samples}.txt" #pareil que pour input extract 
    output:
        seq = dir+"orf_input_{samples}.fasta"
    params:
        config = "config/config.json"

    message: "Starting the retreival of FASTA sequences from accessions file {input.accns}, writing sequences in file {output.seq}"
    shell:
        "python3 scripts/fastaRes.py {params.config} {input.accns} {output.seq}"



rule get_orf:
    input:
        seqfile = dir+"orf_input_{samples}.fasta" #pareil que pour input extract 
    output:
        res = dir+"{samples}_allORFs.fasta",
        res_longest = dir+"align_input_{samples}.fasta"
    params:
        config = "config/config.json"

    message: "Starting ORFs search in FASTA sequences from file {input.seqfile}, writing longest ORFs found in file {output.res_longest}"
    shell:
        "python3 scripts/ORF.py {params.config} {output.res} {output.res_longest}"

rule align_mafft:
    input:
        lgst_ORFs = dir+"align_input_{samples}.fasta"
    output:
        out_covAln = dir+"{samples}_mafft.fasta"
    params:
        config = "config/config.json",
        out_mafft = dir+"{samples}_ORFs_al_mafft.fasta"

    message: "Starting mafft nucleotide alignment. Aligning sequences from file {input.lgst_ORFs}, writing alignment in file {output.out_covAln}"
    run:
        shell("mafft --auto --quiet {input.lgst_ORFs} > {params.out_mafft}"),
        shell("python3 scripts/covAln.py {params.out_mafft} {output.out_covAln} {params.config}")


# The alignment consists of 2 to 3 steps.
# Two arguments from the config.json file dictate which aligners will be used :
# - align_nt : Boolean, defines whether or not to use the MAFFT nucleotide aligner before the codon aligner(s).
# - codon_aligner : Array of str, defines which codon aligner to use, and if 2 are used, in which order
#   The two supported codon aligner are executed by having their name ("prank" or "macse") written in the config.json file
#   The order in which the names are written in the array will define the order of execution.
# Example case :
#
#   "align_nt" = "true"
#   "codon_aligner" = ["prank", "macse"]
#   --> This combination of value will execute the mafft nucleotide aligner before executing prank and finally, macse.
#
# It is recommended to use the macse codon aligner, as it is faster and yields better results than prank in most cases.

rule first_align_codon:
    input:
        in_alcodon = dir+"{samples}_mafft.fasta" if config["parameters"]["align_nt"] else dir+"align_input_{samples}.fasta"
    output:
        out_clusterIso = dir+"{samples}_clustiso_first.fasta" if len(config["parameters"]["codon_aligner"]) == 2 else dir+"{samples}_clustiso.fasta"
    params:
        config = "config/config.json",
        extension = config["parameters"]["codon_aligner"][0],
        out_codon_param = dir+"{samples}_alcodon",
        macse_param = "-prog refineAlignment -align" if config["parameters"]["align_nt"] else "-prog alignSequences -seq"

    message: "Starting first codon alignment with "+config["parameters"]["codon_aligner"][0]+" from file {input.in_alcodon}, writing results in file {output.out_clusterIso}" if len(config["parameters"]["codon_aligner"]) == 2 \
    else "Starting codon alignment with "+config["parameters"]["codon_aligner"][0]+" from file {input.in_alcodon}, writing results in file {output.out_clusterIso}"
    run:
        if config["parameters"]["codon_aligner"][0] == "prank" :
            shell("prank -d={input.in_alcodon} -o={params.out_codon_param}_{params.extension}.fas -codon -F"),236
            shell("python3 scripts/clusterIso.py {params.config} {output.out_clusterIso} {params.out_codon_param}_{params.extension}.fas")

        elif config["parameters"]["codon_aligner"][0] == "macse" :
            shell("java -jar ../macse_v2.06.jar {params.macse_param} {input.in_alcodon} -out_NT {params.out_codon_param}_{params.extension}.fas"),
            shell("python3 scripts/clusterIso.py {params.config} {output.out_clusterIso} {params.out_codon_param}_{params.extension}.fas")

        else :
            print(f"Le paramètre codon_aligner du fichier config n'a pas été correctement rempli.\nIl doit contenir une liste d'au moins 1 élément et d'au plus 2.\nLes deux seules valeurs qu'il peut contenir sont \"macse\" ou \"prank\".\nIl contient actuellement la valeur {config['parameters']['codon_aligner']}")

rule second_align_codon:
    input:
        in_alcodon_2 = dir+"{samples}_clustiso_first.fasta" if len(config["parameters"]["codon_aligner"]) == 2 else dir+"{samples}_clustiso.fasta"
    output:
        out_clusterIso_2 = dir+"tree_input_{samples}.fasta"
    params:
        config = "config/config.json",
        extension = config["parameters"]["codon_aligner"][1] if len(config["parameters"]["codon_aligner"]) == 2 else config["parameters"]["codon_aligner"][0],
        out_codon_param = dir+"{samples}_alcodon",
        macse_param = "-prog refineAlignment -align" if config["parameters"]["align_nt"] else "-prog alignSequences -seq"

    message: "Starting second codon alignment with "+config["parameters"]["codon_aligner"][1]+" from file {input.in_alcodon_2}, writing results in file {output.out_clusterIso_2}"\
    if len(config["parameters"]["codon_aligner"]) == 2 else "Alignment {input.in_alcodon_2} renamed : {output.out_clusterIso_2}"


    run:
        if len(config["parameters"]["codon_aligner"]) == 1 :
            shell("mv results/{wildcards.samples}_clustiso.fasta results/tree_input_{wildcards.samples}.fasta") #Si un seul aligneur doit être lancé, la seule action de cette règle est de renommer le fichier de sortie.

        elif len(config["parameters"]["codon_aligner"]) == 2 :

            if config["parameters"]["codon_aligner"][1] == "prank" :
                shell("prank -d={input.in_alcodon_2} -o={params.out_codon_param}_{params.extension} -codon -F"),
                shell("python3 scripts/clusterIso.py {params.config} {output.out_clusterIso_2} {params.out_codon_param}_{params.extension}.fas")

            elif config["parameters"]["codon_aligner"][1] == "macse" :
                shell("java -jar ../macse_v2.06.jar {params.macse_param} {input.in_alcodon_2} -out_NT {params.out_codon_param}_{params.extension}.fas"),
                shell("python3 scripts/clusterIso.py {params.config} {output.out_clusterIso_2} {params.out_codon_param}_{params.extension}.fas")
            else :
                print(f"Le paramètre codon_aligner du fichier config n'a pas été correctement rempli.\nIl doit contenir une liste d'au moins 1 élément et d'au plus 2.\nLes deux seules valeurs qu'il peut contenir sont \"macse\" ou \"prank\".\nIl contient actuellement la valeur {config['parameters']['codon_aligner']}")

        else :
            print(f"Le paramètre codon_aligner du fichier config n'a pas été correctement rempli.\nIl doit contenir une liste d'au moins 1 élément et d'au plus 2.\nLes deux seules valeurs qu'il peut contenir sont \"macse\" ou \"prank\".\nIl contient actuellement la valeur {config['parameters']['codon_aligner']}")
           
# Rules using analysis.py :
rule tree:
    input:
        infile = dir+"tree_input_{samples}.fasta" #ajouter tree dans le nom
    params:
        fonction = "phyMLTree",
        config = "config/config.json"
    output:
        phymlfile = dir+config["data"]["aln"].split("/")[-1].split(".")[0]+".phylip_phyml_tree.txt"
    shell:
        "python3 scripts/Analysis.py {params.config} {params.fonction}"


rule duplication:
    input:
        infile = dir+"ex_CCDS_ORFs_alcodon_clustiso.fasta", #ajouter duplication dans le nom
        infile_tree = config["data"]["dAlTree"][config["data"]["aln"]] if len(config["data"]["dAlTree"]) >0 else dir+config["data"]["aln"].split("/")[-1].split(".")[0]+".phylip_phyml_tree.txt"
    params:
        fonction = "checkPhyMLTree",
        config = "config/config.json"
    output:
        output_nhx = config["data"]["dAlTree"][config["data"]["aln"]]+"_recs.nhx" if len(config["data"]["dAlTree"]) > 0 else dir+config["data"]["aln"].split("/")[-1].split(".")[0]+"_recs.nhx",
        output_svg = config["data"]["dAlTree"][config["data"]["aln"]]+"_recs.svg" if len(config["data"]["dAlTree"]) > 0 else dir+config["data"]["aln"].split("/")[-1].split(".")[0]+"_recs.svg"
    shell:
        "python3 scripts/Analysis.py {params.config} {params.fonction}"


rule recombination:
    input:
        config = "config/config.json"
    params:
        fonction = "gardRecomb",
        config = "config/config.json"
    output:
    	gardRes =  dir+config["data"]["aln"].split("/")[-1].split(".")[0]+".gard",
	    gardJson = dir+config["data"]["aln"].split("/")[-1]+".GARD.json"
    shell:
        "python3 scripts/Analysis.py {params.config} {params.fonction}"

rule positive_selection:
    input:
        config = "config/config.json"
    output:
	    pos_res = dir+"files_list.txt"
    shell:
        "python3 scripts/posSel.py {input.config}"
